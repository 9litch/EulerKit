//
// The sequence of triangle numbers is generated by adding the natural
// numbers. So the 7th triangle number would be
// 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
//
// The first ten terms would be:
//
// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
// Let us list the factors of the first seven triangle numbers:
//
//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
//
// We can see that 28 is the first triangle number to have over
// five divisors.
//
// What is the value of the first triangle number to have over five
// hundred divisors?
//

import Cocoa

var primeCache = Dictionary<Int, Bool>()
func isPrime(num:Int) -> Bool {
    if num < 2 {
        return false
    }
    if num == 2 || num == 3 {
        return true
    }
    if num % 2 == 0 {
        return false
    }
    if let cachedVal = primeCache[num] {
        return true
    }
    
    let squareRoot:Int = Int(sqrt(Float(num)))
    let upperBound = squareRoot
    for i in 3...upperBound {
        if num % i == 0 {
            return false
        }
    }
    primeCache[num] = true
    return true
}

func primeFactorization(n:Int) -> [Int] {
    var current = n
    var factors = Dictionary<Int,Int>()
    var try = 2
    
    while try <= current {
        if isPrime(try) && (current % try == 0) {
            current = current / try
            if let f = factors[try] {
                factors[try] = f+1
            } else {
                factors[try] = 1
            }
        } else {
            try++
        }
    }
    
    return Array(factors.values)
}

//
// An infinite sequence of Triangle numbers
//
class TriangleNumberSequence: Sequence {
    func generate() -> GeneratorOf<Int> {
        var current = 0
        var count = 0
        
        return GeneratorOf<Int> {
            count += 1
            current = current + count
            return current
        }
    }
}

func numberOfDivisors(num:Int) -> Int {
    var divisors = 1
    for i in primeFactorization(num) {
        divisors = divisors * (i+1)
    }
    return divisors
}

for i in TriangleNumberSequence() {
    if numberOfDivisors(i) > 500 {
        println(i)
        break
    }
}

